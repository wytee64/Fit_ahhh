# FITNESS TRACKER APPLICATION - MASTER DOCUMENTATION

## PROJECT OVERVIEW
This Java desktop application allows users to track their workouts and monitor fitness progress. It provides a user-friendly interface for recording various workout types, viewing workout history, and tracking daily progress.

## PROJECT ARCHITECTURE
The application follows a Model-View-Controller (MVC) pattern:
- **Models**: Data structures and database operations (User, Workout)
- **GUI (View)**: User interface components (frames and panels)
- **Utils**: Helper classes for database connection and storage

## FILE STRUCTURE EXPLANATION

### GUI PACKAGE (src/gui/)

#### LoginFrame.java
**Purpose**: Handles user authentication and registration.
**Key Features**:
- Login form with email/password fields
- Registration form with name/email/password fields
- Card layout to switch between login and register views
- Authentication logic with database validation
- Styled UI with consistent color theme

#### MainFrame.java
**Purpose**: Main application window that contains all panels.
**Key Features**:
- Header panel with user welcome message
- Container for WorkoutPanel and ProgressPanel
- Dark/light mode toggle functionality
- Logout functionality
- Window listener to clean up resources on close

#### WorkoutPanel.java
**Purpose**: Manages workout entry form and workout history table.
**Key Features**:
- Form for adding new workouts with fields for type, duration, calories, sets, reps
- Table displaying workout history with sorting and filtering
- CRUD operations for workouts (add, view, edit, delete)
- Date filter to view workouts from specific dates
- Background refresh to keep data updated
- Integration with ProgressPanel to update statistics

#### ProgressPanel.java
**Purpose**: Displays daily workout statistics.
**Key Features**:
- Shows total workouts completed today
- Calculates and displays total calories burned today
- Tracks total workout duration for the day
- Auto-updates when new workouts are added

### MODELS PACKAGE (src/models/)

#### User.java (inferred from code references)
**Purpose**: Represents a user account with authentication methods.
**Key Features**:
- User properties (ID, name, email, password)
- Login and registration methods
- Database operations for user management

#### Workout.java
**Purpose**: Represents a workout entry with database operations.
**Key Features**:
- Workout properties (ID, type, duration, calories, sets, reps, date)
- Serializable for data persistence
- CRUD operations (save, update, delete)
- Static methods to retrieve workouts by user ID or date
- Database query handling with proper resource management

### UTILS PACKAGE (src/utils/)

#### DatabaseConnection.java
**Purpose**: Manages database connections.
**Key Features**:
- Connection pool to MySQL database
- Credentials and connection string management
- Static method to get database connections

#### LocalStorage.java
**Purpose**: Provides file-based storage as an alternative to database.
**Key Features**:
- Methods to save and load workout data to/from files
- User-specific storage with unique filenames
- Serialization/deserialization of workout objects
- Error handling for I/O operations

#### ColorTheme.java (inferred from code references)
**Purpose**: Defines UI color themes and styling.
**Key Features**:
- Color constants for consistent UI
- Methods for styling UI components
- Support for light and dark themes

### PROJECT CONFIGURATION

#### Fitness track ahhh.iml
**Purpose**: IntelliJ IDEA module file defining project structure.
**Key Features**:
- Source folder configuration
- Library dependencies (MSSQL JDBC driver)
- Compiler settings

## DATABASE SCHEMA

### Users Table
- user_id: Primary key, auto-increment
- name: User's full name
- email: Unique email for login
- password: User's password (should be hashed in production)
- created_at: Timestamp of account creation

### Workouts Table
- workout_id: Primary key, auto-increment
- user_id: Foreign key to users table
- workout_type: Type of workout (Running, Swimming, etc.)
- duration: Workout duration in minutes
- calories: Calories burned
- sets: Number of sets (for strength training)
- reps: Number of repetitions per set
- workout_date: Timestamp of workout

## DATA FLOW

1. **User Authentication**:
   - User enters credentials in LoginFrame
   - Credentials validated against database
   - On success, MainFrame is loaded with user data

2. **Workout Management**:
   - User enters workout details in WorkoutPanel form
   - Data validated and saved to database via Workout model
   - Table refreshed to show updated workout history
   - ProgressPanel statistics updated to reflect new workout

3. **Progress Tracking**:
   - ProgressPanel queries database for today's workouts
   - Statistics calculated based on workout data
   - UI updated to display current progress

## TECHNICAL IMPLEMENTATION DETAILS

### UI Design
- Consistent color scheme using ColorTheme utility
- Responsive layouts using BorderLayout and GridBagLayout
- Custom borders and styling for visual hierarchy
- Form validation to ensure data integrity

### Database Operations
- Connection pooling for efficient database access
- Prepared statements to prevent SQL injection
- Transaction management for data integrity
- Error handling with appropriate user feedback

### Background Processing
- Scheduled executor service for background refresh
- Thread management to prevent UI freezing
- Proper resource cleanup on application close

## TROUBLESHOOTING

### Common Issues
1. **Database Connection Failures**
   - Verify MySQL server is running
   - Check connection parameters in DatabaseConnection.java
   - Ensure network allows connections to database port

2. **Login Issues**
   - Verify email and password are correct
   - Check if user exists in database
   - Ensure database connection is working

3. **Workout Data Not Saving**
   - Check database connection
   - Verify all required fields are filled
   - Look for error messages in console output

4. **UI Display Problems**
   - Verify Java version compatibility
   - Check for missing UI components
   - Ensure proper layout managers are used

## FUTURE ENHANCEMENTS
- Workout analytics with charts and graphs
- Goal setting and achievement tracking
- Social sharing features
- Mobile companion app
- Cloud synchronization